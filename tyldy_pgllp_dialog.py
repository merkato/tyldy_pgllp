# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TyldyPGLDialog
                                 A QGIS plugin
 Narzędzia przydatne w rozliczaniu powierzchni PGL LP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-15
        git sha              : $Format:%H$
        copyright            : (C) 2023 by GIS w Górach
        email                : tomasz@nycz.beskidy.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
from qgis.core import *
from qgis.utils import iface
from qgis.PyQt.QtGui import QColor, QFont

import tempfile
import zipfile


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'tyldy_pgllp_dialog_base.ui'))


class TyldyPGLDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(TyldyPGLDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.oddzialy = None
        self.uzytki = None
        self.linie = None
        self.komunikacja = None
        self.cieki = None
        self.linie_a = None
        self.komunikacja_a= None
        self.cieki_a = None
        self.uzytki_a = None
        self.arodes = None
        self.save_layer_path = ""

        self.pobierzWarstwySLMNBtn.clicked.connect(self.pobierz_warstwy_slmn)
        #self.wczytajmLasBtn.clicked.connect(self.wczytaj_mlas)
        #self.analizaBtn.clicked.connect(self.analiza_data)
        self.resetujBtn.clicked.connect(self.resetuj)
        self.zamknijBtn.clicked.connect(self.zamknij)

    def dodaj_mape_bazowa(self):
        """dodaje mapę bazową
        """
        wmts_url = (
            "contextualWMSLegend=0&crs={}&dpiMode=7&"
            "featureCount=10&format={}&layers={}&"
            "styles=default&tileMatrixSet={}&url={}".format(
                'EPSG:2180',
                "image/jpeg",
                "ORTOFOTOMAPA",
                'EPSG:2180',
                'https://mapy.geoportal.gov.pl/wss/service/PZGIK/ORTO/WMTS/StandardResolution?SERVICE%3DWMTS%26REQUEST%3DGetCapabilities'
            )
        )

        self.mapa_bazowa = QgsRasterLayer(wmts_url, "Ortofotomapa", 'wms')
        if self.mapa_bazowa.isValid():
            root = QgsProject.instance().layerTreeRoot()
            QgsProject.instance().addMapLayer(self.mapa_bazowa, False)
            root.insertLayer(len(root.children()), self.mapa_bazowa)
            self.mapa_bazowa.renderer().setOpacity(0.5)
            self.mapa_bazowa.triggerRepaint()

        else:

            msg = QMessageBox.critical(
                    None, "Nie udało się wczytać mapy bazowej", "Sprawdź połączenie z internetem!")

    def dodaj_relacje_atr(self):
        """Tworzy w projekcie relacje pomiędzy warstwami linii i atrybutów
        """
        #Linie
        relacja_linie = QgsRelation()
        relacja_linie.setReferencingLayer( self.linie.id() )
        relacja_linie.setReferencedLayer( self.linie_a.id() )
        relacja_linie.addFieldPair( 'id_lin', 'id_lin' )
        relacja_linie.setId( 'relacja_linii' )
        relacja_linie.setName( 'Atrybut linii' )
        QgsProject.instance().relationManager().addRelation( relacja_linie )
        #Komunikacja
        relacja_komunikacja = QgsRelation()
        relacja_komunikacja.setReferencingLayer( self.komunikacja.id() )
        relacja_komunikacja.setReferencedLayer( self.komunikacja_a.id() )
        relacja_komunikacja.addFieldPair( 'id_kom', 'id_lin' )
        relacja_komunikacja.setId( 'relacja_komunikacji' )
        relacja_komunikacja.setName( 'Atrybut komunikacji' )
        QgsProject.instance().relationManager().addRelation( relacja_komunikacja )        
        #Cieki
        relacja_cieki = QgsRelation()
        relacja_cieki.setReferencingLayer( self.cieki.id() )
        relacja_cieki.setReferencedLayer( self.cieki_a.id() )
        relacja_cieki.addFieldPair( 'id_wody', 'id_lin' )
        relacja_cieki.setId( 'relacja_wody' )
        relacja_cieki.setName( 'Atrybut wody' )
        # rel.isValid() # It will only be added if it is valid. If not, check the ids and field names
        QgsProject.instance().relationManager().addRelation( relacja_cieki )

    def dodaj_relacje_opisowe(self):
        """Tworzy w projekcie relacje pomiędzy warstwami geom i opisowymi
        """
        #Linie
        relacja_arodes = QgsRelation()
        relacja_arodes.setReferencingLayer( self.arodes.id() )
        relacja_arodes.setReferencedLayer( self.linie_a.id() )
        relacja_arodes.addFieldPair( 'id_lin', 'id_lin' )
        relacja_arodes.setId( 'relacja_arodes' )
        relacja_arodes.setName( 'Numer wewnętrzny' )

    def pobierz_warstwy_slmn(self):
        """Ładuje warstwy pochodne z folderu .zip do projektu).
        """
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.DirectoryOnly)
        self.selected_data = dialog.getOpenFileName(
            None, "Wybierz archiwum", "", "Archiwum ZIP (*.zip)")

        if self.selected_data[0]:
            self.pobierzWarstwySLMNBtn.setEnabled(False)
            zf = zipfile.ZipFile(self.selected_data[0])
            tempdir= tempfile.TemporaryDirectory()
            zf.extractall(tempdir.name)
            uzytki_path = tempdir.name + '\\'+ 'a_uzyt_pol.shp'
            oddzialy_path = tempdir.name + '\\'+ 'a_oddz_pol.shp'
            linie_path = tempdir.name + '\\'+ 'a_line_lin.shp'
            linie_a_path = tempdir.name + '\\'+ 'a_line_a.dbf'
            komunikacja_path = tempdir.name + '\\'+ 'a_kom_lin.shp'
            komunikacja_a_path = tempdir.name + '\\'+ 'a_kom_a.dbf'
            cieki_path = tempdir.name + '\\'+ 'a_ciek_lin.shp'
            cieki_a_path = tempdir.name + '\\'+ 'a_ciek_a.dbf'

            self.uzytki = QgsVectorLayer(uzytki_path, "uzyt_pol", "ogr")
            self.oddzialy= QgsVectorLayer(oddzialy_path, "oddz_pol", "ogr")
            self.linie = QgsVectorLayer(linie_path, "line_lin", "ogr")
            self.linie.dataProvider().setEncoding(u'windows-1250')
            self.linie_a = QgsVectorLayer(linie_a_path, "line_a", "ogr")
            self.komunikacja = QgsVectorLayer(komunikacja_path, "kom_lin", "ogr")
            self.komunikacja_a = QgsVectorLayer(linie_a_path, "kom_a", "ogr")
            self.cieki = QgsVectorLayer( cieki_path, "ciek_lin", "ogr")
            self.cieki_a = QgsVectorLayer(linie_a_path, "ciek_a", "ogr")

            if self.oddzialy.isValid() and self.uzytki.isValid():
                    # dodanie stylu do warstwy z oddzialami leśnymi
                    symbol =  QgsFillSymbol.createSimple(
                    {'color': 'white', 'outline_color' : 'gray',  'outline_style': 'solid',
                    'outline_width': '0.4'})
                    renderer = QgsSingleSymbolRenderer(symbol)
                    self.oddzialy.setRenderer(renderer)

                    # dodanie stylu do warstwy z uzytkami leśnymi
                    symbol =  QgsFillSymbol.createSimple(
                    {'color': '#effdea', 'outline_color' : 'green',  'outline_style':'dash',
                    'outline_width': '0.1'})
                    renderer = QgsSingleSymbolRenderer(symbol)
                    self.uzytki.setRenderer(renderer)

                    # dodanie stylu do warstwy z liniami leśnymi
                    symbol =  QgsLineSymbol.createSimple(
                    {'color': '#be9b6a', 'outline_color' : '#be9b6a',  'outline_style':'solid',
                    'outline_width': '0.15'})
                    renderer = QgsSingleSymbolRenderer(symbol)
                    self.linie.setRenderer(renderer)

                    # dodanie stylu do warstwy z komunikacja
                    symbol =  QgsLineSymbol.createSimple(
                    {'color': '#ff9b6a', 'outline_color' : '#ff9b6a',  'outline_style':'solid',
                    'outline_width': '0.25'})
                    renderer = QgsSingleSymbolRenderer(symbol)
                    self.komunikacja.setRenderer(renderer)

                    # dodanie stylu do warstwy z ciekami
                    symbol =  QgsLineSymbol.createSimple(
                    {'color': '#0000ee', 'outline_color' : '#0000ee',  'outline_style':'solid',
                    'outline_width': '0.20'})
                    renderer = QgsSingleSymbolRenderer(symbol)
                    self.cieki.setRenderer(renderer)

                    QgsProject.instance().addMapLayers( [self.linie, self.linie_a, self.komunikacja, self.komunikacja_a, self.cieki, self.cieki_a, self.uzytki, self.oddzialy])
                    self.dodaj_mape_bazowa() #dodawanie warstwy bazowej
                    ms = QgsMapSettings()
                    ms.setLayers([self.uzytki, self.oddzialy])
                    rect = QgsRectangle(ms.fullExtent())
                    iface.mapCanvas().setExtent(rect) # ustawaianie do zakresu warstwy wydzielenni warstwy dróg leśnych
                    iface.mapCanvas().refresh()
                    self.dodaj_relacje_atr() # ustawianie relacji pomiedzy warstwami SLMN
                    QMessageBox.information(
                            None, "Sukces", "Ładowanie warstw SLMN zakonczone sukcesem!")
                    self.pobierzWarstwySLMNBtn.setEnabled(False)
                    self.wczytajmLasBtn.setEnabled(True)
                    self.resetujBtn.setEnabled(True)


            else:
                msg = QMessageBox.critical(None, "Nie udało się wczytać warstw SLMN", "Sprawdź poprawność danych!")
                self.resetuj()

        else:

            msg = QMessageBox.critical(
            None, "Nie wybrano danych", "Wybierz dane!")

    def wczytaj_mlas(self):
        rules = (
            ('Użytek Ls', "type LIKE 'Maximum'", 'red', (3, 2)),
            ('Restriktion_h', "type LIKE 'Summe_2'", 'orange', (200, 0))
        )
        symbol = QgsSymbol.defaultSymbol(self.uzytki.geometryType())
        renderer = QgsRuleBasedRenderer(symbol)

        # get the "root" rule
        root_rule = renderer.rootRule()

        for label, expression, color_name, scale in rules:
            # create a clone (i.e. a copy) of the default rule
            rule = root_rule.children()[0].clone()
            # set the label, expression and color
            rule.setLabel(label)
            rule.setFilterExpression(expression)
            rule.symbol().setColor(QColor(color_name))
            # set the scale limits if they have been specified
            if scale is not None:
                rule.setMinimumScale(scale[0])
                rule.setMaximumScale(scale[1])
            # append the rule to the list of rules
            root_rule.appendChild(rule)

        # delete the default rule
        root_rule.removeChildAt(0)


    def resetuj(self):
        """resetuje dane
        """
        self.oddzialy = None
        self.uzytki = None
        self.linie = None
        self.komunikacja = None
        self.cieki = None
        self.linie_a = None
        self.komunikacja_a= None
        self.cieki_a = None
        self.uzytki_a = None
        self.arodes = None
        self.save_layer_path = ""

        self.pobierzWarstwySLMNBtn.setEnabled(True)
        self.wczytajmLasBtn.setEnabled(False)
        self.resetujBtn.clicked.connect(self.resetuj)
        self.zamknijBtn.clicked.connect(self.zamknij)

    def zamknij(self):
        """zamyka okno wtyczki
        """
        self.close()
